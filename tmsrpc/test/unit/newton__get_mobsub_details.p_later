{test_xmlrpc_includes.i}
{unit/checkutils.i}
{timestamp.i}


gcFixtures = "mobsub,order,imsi,OrderAccessory,DCCli,TMSParam,ActionLog".

DEFINE VARIABLE gcParamArray AS CHARACTER NO-UNDO. 
gcParamArray = "".

DEFINE VARIABLE gcReturnStruct AS CHARACTER NO-UNDO. 


/* Function to call the RPC */
FUNCTION call_get_mobsub_details RETURN LOGICAL:
    run_rpc_method("newton.get_mobsub_details").
    RETURN TRUE.
END FUNCTION.

DEFINE VARIABLE lLogOn AS LOGICAL INIT "FALSE" NO-UNDO. 
FUNCTION fLog RETURN LOGICAL (INPUT pcMsg AS CHARACTER):
   IF lLogOn THEN
      MESSAGE pcMsg VIEW-AS ALERT-BOX.
   RETURN TRUE.
END.

/**
 * This function checks data returned for one subscription.
 *
 * @param the fixture against which the returned data is checked.
 */
FUNCTION fCheckMobsub RETURN LOGICAL (INPUT pcMobsubFixture AS CHARACTER):
   fetch_fixture(pcMobsubFixture, BUFFER Mobsub:HANDLE).
   gcReturnStruct = get_struct("", "").
   checkChar("Mobsub.CLI", Mobsub.CLI, get_string(gcReturnStruct, "cli")).
   fLog("After CLI check").
   checkInt("Mobsub.MsStatus", Mobsub.MsStatus, get_int(gcReturnStruct, 
      "msstatus")).
   fLog("After MsStatus check").
   checkDecimal("Mobsub.ActivationTS", Mobsub.ActivationTS, 
      get_timestamp(gcReturnStruct, "activation_time")).
   fLog("After ActivationTS check").
   checkChar("Mobsub.ICC", Mobsub.ICC, get_string(gcReturnStruct, "icc")).
   fLog("After ICC check").
   checkChar("Mobsub.CLIType", Mobsub.CLIType, get_string(gcReturnStruct, 
      "subscription_type_id")).
   fLog("After CLIType check").
   IF MobSub.PayType THEN
      checkChar("MobSub.PayType", "prepaid", get_string(gcReturnStruct, 
        "payment_method")).
   ELSE
      checkChar("MobSub.PayType", "postpaid", get_string(gcReturnStruct, 
        "payment_method")).
   fLog("After PayType check").
   checkInt("Mobsub.CustNum", Mobsub.CustNum, get_int(gcReturnStruct, 
      "custnum")).
   fLog("After CustNum check").
   checkChar("Mobsub.IDCode", Mobsub.IDCode, get_string(gcReturnStruct,
      "id_code")).
   RETURN TRUE.
END.

/**
 * This function checks the data returned from the RPC for one
 * IMSI record.
 *
 * @param the IMSI fixture against which the returned data is checked.
 */
FUNCTION fCheckIMSI RETURN LOGICAL (INPUT pcIMSIFixture AS CHARACTER):
   fetch_fixture(pcIMSIFixture, BUFFER IMSI:HANDLE).
   checkChar("IMSI.PIN1", IMSI.PIN1, get_string(gcReturnStruct, "pin1")).
   checkChar("IMSI.PIN2", IMSI.PIN2, get_string(gcReturnStruct, "pin2")).
   checkChar("IMSI.PUK1", IMSI.PUK1, get_string(gcReturnStruct, "puk1")).
   checkChar("IMSI.PUK2", IMSI.PUK2, get_string(gcReturnStruct, "puk2")).
   RETURN TRUE.
END.

/**
 * This function checks the data returned from the XML RPC concerning
 * OrderAccessory (order terminal) record. There is a chance that
 * OrderAccessory is returned as empty an then the fixture name given
 * as parameter is empty.
 * 
 * @param the OrderAccessory fixture against which the data is checked.
 */
FUNCTION fCheckOrderAccessory RETURN LOGICAL (INPUT pcOAFixture AS CHARACTER):
   IF pcOAFixture NE "" THEN
   DO:
      fetch_fixture(pcOAFixture, BUFFER OrderAccessory:HANDLE).
      checkChar("OrderAccessory.ProductCode", OrderAccessory.ProductCode,
          get_string(gcReturnStruct, "terminal")).
      checkChar("OrderAccessory.IMEI", OrderAccessory.IMEI,
          get_string(gcReturnStruct, "imei")).
   END.
   ELSE
   DO:
      checkChar("OrderAccessory.ProductCode", "",
          get_string(gcReturnStruct, "terminal")).
      checkChar("OrderAccessory.IMEI", "",
          get_string(gcReturnStruct, "imei")).
   END.
   RETURN TRUE.
END.


FUNCTION fCheckActionLog RETURN LOGICAL (INPUT pcActionLogFixture AS CHARACTER):
   IF pcActionLogFixture NE "" THEN
   DO:
      fetch_fixture(pcActionLogFixture, BUFFER ActionLog:HANDLE).
      checkInt("ActionLog.ActionStatus", ActionLog.ActionStatus, 
          get_int(gcReturnStruct, "billing_permission")).
   END.
   ELSE
      checkInt("Unexisting ActionLog", 0, 
          get_int(gcReturnStruct, "billing_permission")).

   RETURN TRUE.
END.



PROCEDURE test_with_all_records_DCCLI_TermDate:
   add_int(gcParamArray, "", 25). /* MsSeq */
   call_get_mobsub_details().
   assert_success().
   fLog("after rpc success").

   fCheckMobsub("MobsubDetails1").
   fLog("after check mobsub").
   fCheckIMSI("MobsubDetailsIMSI").
   fLog("after checkIMSI").

   checkChar("NumberType","new", get_string(gcReturnStruct, "number_type")).
   fLog("here").

   fCheckOrderAccessory("GetMobSubDetailsOA").
   fLog("here2").
   fetch_fixture("MobsubDetailsDCCLI", BUFFER DCCLI:HANDLE).   
   checkChar("DCCLI.TermDate", STRING(DCCLI.TermDate, "99-99-9999"), 
      get_string(gcReturnStruct, "period_contract")).
   fLog("here3").
   fCheckActionLog("MobsubDetails1").
   fLog("here4").
END.


PROCEDURE test_with_renove_order:
   add_int(gcParamArray, "", 26). /* MsSeq */
   call_get_mobsub_details().
   assert_success().
   fCheckMobsub("MobsubWithRenoveOrder").
   fCheckOrderAccessory("GetMobSubDetailsOARenove").
   checkChar("NumberType","new", get_string(gcReturnStruct, "number_type")).
   fCheckActionLog("MobsubWithRenoveOrder").
END.



PROCEDURE test_mnp_order_based_on_mnpstatus_without_orderaccessory:
   add_int(gcParamArray, "", 27). /* MsSeq */
   call_get_mobsub_details().
   assert_success().
   fCheckMobsub("MobsubWithMnpNumberBasedMnpStatus").
   fCheckOrderAccessory("").
   checkChar("NumberType","mnp", get_string(gcReturnStruct, "number_type")).
   fCheckActionLog("MobsubWithMnpNumberBasedMnpStatus").
END.



PROCEDURE test_mnp_order_based_on_CLI_DCCLIValidTo:
   add_int(gcParamArray, "", 28). /* MsSeq */
   call_get_mobsub_details().
   assert_success().
   fCheckMobsub("MobsubWithMnpNumberBasedCLI").
   fCheckOrderAccessory("").
   checkChar("NumberType","mnp", get_string(gcReturnStruct, "number_type")).
   fetch_fixture("MobsubDetailsDCCLITermDateNE", BUFFER DCCLI:HANDLE).   
   checkChar("DCCLI.TermDate", STRING(DCCLI.ValidTo, "99-99-9999"), 
      get_string(gcReturnStruct, "period_contract")).
   fCheckActionLog("").
END.

PROCEDURE test_not_found_mobsub:
   add_int(gcParamArray, "", 999999). /* MsSeq */
   call_get_mobsub_details().
   assert_fault({&APPLICATION_ERROR},"MobSub entry 999999 not found").
END.



