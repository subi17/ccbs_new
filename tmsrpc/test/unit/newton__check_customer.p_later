/**
  @input 
      pcPersonId = CustNum 
      pcIdType = id_type 
      plSelfEmployed 
*/


{test_xmlrpc_includes.i}
gcFixtures = "customer,CustCat,Limit,mobsub,ordercustomer".

DEFINE VARIABLE gcParamArray AS CHARACTER NO-UNDO. 
gcParamArray = "".
DEFINE VARIABLE gcParamStruct AS CHARACTER NO-UNDO. 
gcParamStruct = "".

FUNCTION add_params RETURN LOGICAL(
   INPUT pcPersonId AS CHAR,
   INPUT pcIdType AS CHAR,
   INPUT plSelfEmployed AS LOG):
   add_string(gcParamArray, ?, pcPersonId).
   add_string(gcParamArray, ?, pcIdType).
   add_boolean(gcParamArray, ?, plSelfEmployed).

RETURN TRUE.
END FUNCTION.
/**
   Customer found from db
*/

PROCEDURE test_check_OK_customer:
   add_params("4","timok",false).
   run_rpc_method("newton.check_customer").
   assert_success().    
END. 

/**
   Customer not found from db
*/

PROCEDURE test_check_FAIL_customer:
   add_params("99","timok",false).
   run_rpc_method("newton.check_customer").
   assert_fault(0,"").
END.

/*
   Customers subscription limit exceeded when 
   llSelfEmployed = true, lookup from custcat (subscription limit = 5)
*/
PROCEDURE test_check_failSelfEmployed_customer:
   add_params("4","timok",true).
   run_rpc_method("newton.check_customer").
   assert_fault(0,"").
END.

/*
   Customer subscription ok, (subscription limit = 5)
*/
PROCEDURE test_check_okSelfEmployed_customer:
 add_params("5","timok",true).
 run_rpc_method("newton.check_customer").
 assert_success().

END.

/*
   Customer subsction ok, (subscription limit =5), but there is subsscription(s) 
   marked as (customer) GIFT
*/
PROCEDURE test_check_okGIFT_customer:
   add_params("15","timok",true).
   run_rpc_method("newton.check_customer").
   assert_success().
END.

/* 
   Customer subscription ok, limit reached, but mobsub.salesman = GIFT

*/
PROCEDURE test_check_okGIFTMobsub_customer:
   add_params("16","timok",true).
   run_rpc_method("newton.check_customer").
   assert_success().
END.
