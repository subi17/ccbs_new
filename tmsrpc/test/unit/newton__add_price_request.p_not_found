{test_xmlrpc_includes.i}
/* {fmpricereq.i &as_mock} */

{timestamp.i}

/**
 * This is the test of corresponding newton__add_price_request 
 * XML RPC method.
 *
 * The fixture usage of this test:
 *
 * - fixtures fetched: none
 * - The RPC method is assumed to fetch following fixtures: none. 
 *
 * The creation and usage of the price request 
 * records belong to the mock function that still have
 * problems in implementation.
 *
 */

 
gcFixtures = "mobsub,customer,msisdn".

DEF VAR gcParamArray AS CHAR NO-UNDO.
DEF VAR gcSubParamArray1 AS CHAR NO-UNDO.
DEF VAR gcSubParamArray2 AS CHAR NO-UNDO.
DEF VAR gcSubParamArray3 AS CHAR NO-UNDO.

DEF VAR gcArray AS CHAR NO-UNDO.


/**
* This function adds parameters into one array of the array that is directly 
* inside the top level of the parameter structure of the RPC method.
*
* @param pcSubArray  the subarray to contain the struct.
* @param pcBillCode  the billcode for the created price request
* @param piPayType   the paytype  for the created price request
* @param piMSISDNType  the MSISDNType for the created price request
* @param pdaValidFrom  the ValidFrom for the created price request
*/
FUNCTION fadd_parameters RETURNS LOGICAL 
   (INPUT pcSubArray AS CHARACTER,
    INPUT pcBillCode AS CHARACTER,
    INPUT piPayType AS INTEGER,
    INPUT piMSISDNType AS INTEGER,
    INPUT pdeNewPrice AS DECIMAL,
    INPUT pdaValidFrom AS DATETIME):

   add_string(pcSubArray, ?, pcBillCode).
   add_int(pcSubArray, ?, piPayType).
   add_int(pcSubArray, ?, piMSISDNType).
   add_double(pcSubArray, ?, pdeNewPrice).
   add_datetime(pcSubArray, ?, pdaValidFrom). 
END.

/**
 * This function performs the RPC method call and asserts if the 
 * method call fails. It also gets the main array from the
 * top level of the response structure and verifies that 
 * its elements are integers. Returns TRUE if passed. 
 *
 * @return TRUE if succeeded
 */
FUNCTION fadd_price_request RETURNS LOGICAL:
    run_rpc_method("newton.add_price_request").
    
    assert_success().
    
    gcArray = get_Array("", "0").
    
    assert_response(gcArray, "int").  

    RETURN TRUE.
END.

/**
 * This is the one and only test implemented so far. It creates 3 subarrays 
 * to the main array that is created directly in the top level of the parameter 
 * structure. After adding parameters to the request the RPC method is called 
 * and it is verified that the return value is array contained non zero integers.
 */
PROCEDURE test_add_price_request:
    gcParamArray = add_array("", ?).

    assert(gcParamArray <> "", "Generated array name was empty").

    gcSubParamArray1 = add_array( gcParamArray, "" ).
    assert(gcSubParamArray1 <> "", "First subarray name was empty").
    fadd_parameters(gcSubParamArray1, "21313", 2, 1, 12.23, DATETIME( TODAY    , 0    )). 
    
/*    gcSubParamArray2 = add_array( gcParamArray, "" ).
    assert(gcSubParamArray2 <> "", "Second subarray name was empty").
    assert(gcSubParamArray2 <> gcSubParamArray1, "Second subarray was same as the first").
    fadd_parameters(gcSubParamArray2, "12322", 4, 2, 17.23, DATETIME( TODAY - 2, 2122 )).

    gcSubParamArray3 = add_array( gcParamArray, "" ).
    assert(gcSubParamArray3 <> "", "Second subarray name was empty").
    assert(gcSubParamArray3 <> gcSubParamArray1, "Third subarray was same as the first").
    assert(gcSubParamArray3 <> gcSubParamArray2, "Third subarray was same as the second").
    fadd_parameters(gcSubParamArray3, "21232", 3, 5, 15.02, DATETIME( TODAY - 4, 2323 )). */

    DEFINE VARIABLE iParamArrayCount AS INTEGER NO-UNDO. 
    iParamArrayCount = get_paramcount(gcParamArray).

    fadd_price_request(). 

    DEFINE VARIABLE iRetVal AS INTEGER NO-UNDO. 
    DEFINE VARIABLE iRetValCount AS INTEGER NO-UNDO. 
    DEFINE VARIABLE iValue AS INTEGER NO-UNDO. 
    
    iRetValCount = get_paramcount(gcArray). 
    assert(iRetValCount = iParamArrayCount, "return value count " +
       STRING(iRetValCount) + " did not match with given parameter count" +
       STRING(iParamArrayCount) + ".").

    REPEAT iRetVal = 1 TO iRetValCount:
       iValue = get_int(gcArray, STRING(iRetVal - 1)).
/*       assert(iValue <> 0, "return value is 0"). */
    END. 

END PROCEDURE.

