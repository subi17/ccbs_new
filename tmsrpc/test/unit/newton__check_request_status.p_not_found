{test_xmlrpc_includes.i}

{/apps/xfera/tmsrpc/test/includes/dbutils.i} 

gcFixtures = "msrequest".

/**
 * This is the test set for the corresponding newton__check_request_status
 * XML RPC method.
 *
 * The fixture usage of this test set:
 *
 * - fixtures fetched: none
 * - The RPC method is assumed to fetch following fixtures:
 *      msrequest: DoneStatus, 
 *                 FailedStatus, 
 *                 FailedStatus2,
 *                 CanceledStatus, 
 *                 PendingStatus.
 * - restrictions for building other fixtures: 
 *         msrequest: msrequest value 3237 must not be added; this is needed
 *                    that invalidid status check is not broken.
 */


DEF VAR gcParamArray AS CHAR NO-UNDO.
DEF VAR gcArray AS CHAR NO-UNDO.

/**
 * This function produces a comma separated list of strings with same content 
 * between the commas. For example if  parameter cRepeatedString is "string" 
 * and iCount is 3, the result is "string,string,string".
 *
 * @param  iCount the number of the repeated entries
 * @param  cRepeatedString the string that is repeated in the entries
 * @return  the returned list.
 */
FUNCTION fget_repeated_string RETURN CHARACTER (
   INPUT iCount AS INTEGER, INPUT cRepeatedString AS CHARACTER):

   IF iCount <= 0 THEN RETURN "".

   DEFINE VARIABLE cRetVal AS CHARACTER NO-UNDO. 
   cRetVal = cRepeatedString.
   
   IF iCount = 1 THEN RETURN cRetVal.

   DEFINE VARIABLE iCounter AS INTEGER NO-UNDO. 

   REPEAT iCounter = 2 TO iCount:
      cRetVal = cRetVal + "," + cRepeatedString.
   END.

   RETURN cRetVal.
END.

/**
 * This function calls the RPC method newton__check_request_status.
 * It checks that return type is array containing strings.
 * 
 * @return TRUE if succeeded.
 */
FUNCTION fget_state RETURN LOGICAL:
    run_rpc_method("newton.check_request_status").
    
    assert_success().
    
    gcArray = get_Array("", "0").
    
    DEFINE VARIABLE cExpectedRetType AS CHARACTER NO-UNDO. 
    cExpectedRetType = fget_repeated_string(
       get_paramcount(gcParamArray), "string").
    
    assert_response(gcArray, cExpectedRetType).
    RETURN TRUE.
END FUNCTION.


/**
 * This test adds an array of msrequest id:s as parameter to the RPC method, 
 * calls the RPC method and expects an array of request states as an response. 
 * It also tests the  the invalid status that is received when msrequest is not 
 * found.
 *
 * The fixture usage of this test:
 *
 * - fixtures fetched: none
 * - The RPC method is assumed to fetch following fixtures:
 *      msrequest: DoneStatus (MsRequest:3232), 
 *                 FailedStatus (MsRequest:3233), 
 *                 FailedStatus2 (MsRequest: 3234),
 *                 CanceledStatus (MsRequest: 3235),
 *                 PendingStatus (MsRequest: 3236).
 * - restrictions for building other fixtures: there must not 
 *    be any msrequest record that is with msrequest ID 3237.
 */
PROCEDURE test_get_states:
    delete_disturbing_records(BUFFER msrequest:HANDLE,
      "msrequest", "msrequest", "3232,3233,3234,3235,3236" ).   
    gcParamArray = add_array("", "").
    add_int(gcParamArray, ?, 3232).
    add_int(gcParamArray, ?, 3233).
    add_int(gcParamArray, ?, 3234).
    add_int(gcParamArray, ?, 3235).
    add_int(gcParamArray, ?, 3236).
    add_int(gcParamArray, ?, 3237).
    fget_state().
    assert_equal_char("DONE",get_string(gcArray, "0")).
   assert_equal_char("FAILED",get_string(gcArray, "1")).
   assert_equal_char("FAILED",get_string(gcArray, "2")).
    assert_equal_char("CANCELLED",get_string(gcArray, "3")).
    assert_equal_char("PENDING",get_string(gcArray, "4")).
    assert_equal_char("IDINVALID",get_string(gcArray, "5")).
END PROCEDURE.

/**
 * This test adds an empty array id and tests that RPC method call succeeds. 
 */
PROCEDURE test_get_states_empty_array:
   gcParamArray = add_array("", ?).
   fget_state().
END.

/**
 * This test adds an array of msrequest id:s as parameter to the RPC method, 
 * calls the RPC method and expects an array of request states as an response. 
 * This time the same msrequest record is requested multiple times.
 *
 * The fixture usage of this test:
 *
 * - fixtures fetched: none
 * - The RPC method is assumed to fetch following fixtures:
 *      msrequest: DoneStatus (MsRequest:3232), 
 *                 FailedStatus (MsRequest:3233), 
 */
PROCEDURE test_get_many_same_requests:
    gcParamArray = add_array("", ?).
    add_int(gcParamArray, ?, 3232).
    add_int(gcParamArray, ?, 3232).
    add_int(gcParamArray, ?, 3233).
    add_int(gcParamArray, ?, 3233).
    add_int(gcParamArray, ?, 3233).
    fget_state().
    assert_equal_char("DONE",get_string(gcArray, "0")).
    assert_equal_char("DONE",get_string(gcArray, "1")).
    assert_equal_char("FAILED",get_string(gcArray, "2")).
    assert_equal_char("FAILED",get_string(gcArray, "3")).
    assert_equal_char("FAILED",get_string(gcArray, "4")).
END PROCEDURE.




