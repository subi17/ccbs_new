/**
 * This is the test set for the corresponding newton__send_sms
 * XML RPC method.
 *
 * The fixture usage of this test set:
 *
 * - fixtures fetched: 
 *
 * - The RPC method is assumed to fetch in addition following records:
 *
 *
 * - restrictions for building other fixtures: 
 */

{test_xmlrpc_includes.i}
{unit/checkutils.i}
{timestamp.i}

gcFixtures = "CallAlarm".

DEFINE VARIABLE gcParamArray AS CHARACTER NO-UNDO. 
DEFINE VARIABLE gcParamStruct AS CHARACTER NO-UNDO. 
gcParamArray = "".
DEFINE VARIABLE gcReturnStruct AS CHARACTER NO-UNDO. 

DEFINE VARIABLE pcCLI AS CHARACTER NO-UNDO. 
DEFINE VARIABLE pcMessage AS CHARACTER NO-UNDO. 
DEFINE VARIABLE pdeTimeStamp AS DECIMAL NO-UNDO. 
DEFINE VARIABLE piMaxPages AS INTEGER NO-UNDO. 

FUNCTION call_send_sms RETURN LOGICAL:
    run_rpc_method("newton.send_sms").
    RETURN TRUE.
END FUNCTION.


FUNCTION fAddParams RETURN LOGICAL:
   DEFINE VARIABLE dtDate AS DATE NO-UNDO. 
   DEFINE VARIABLE iTime AS INTEGER NO-UNDO. 
   fSplitTs(pdeTimeStamp, OUTPUT dtDate, OUTPUT iTime).
   add_string("", "", pcCLI).
   add_string("", "", pcMessage).
   IF pdeTimeStamp NE ? THEN
   DO:
      add_timestamp("", "", pdeTimeStamp). 
   END.

   IF piMaxPages NE ? THEN
   DO:
      add_int("", "", piMaxPages).
   END.

   RETURN TRUE.
END.


FUNCTION fCreateMessage RETURN CHARACTER (INPUT iPages AS INTEGER):
   DEFINE VARIABLE cMsg AS CHARACTER NO-UNDO. 
   DEFINE VARIABLE iChar AS INTEGER NO-UNDO. 
   DEFINE VARIABLE iPage AS INTEGER NO-UNDO. 
   REPEAT iPage = 1 TO iPages:
      REPEAT iChar = 1 TO 160:
         cMsg = cMsg + CHR(RANDOM(32,64)).
      END.
   END.
   RETURN cMsg.
END.


FUNCTION fSetParams RETURN LOGICAL 
  (INPUT fpcCLI AS CHARACTER, INPUT fpiPages AS INTEGER,
   INPUT fpiMaxPages AS INTEGER, INPUT fpdeTimeStamp AS DECIMAL):

   pcCLI = fpcCLI.
   pcMessage = fCreateMessage(fpiPages).
   piMaxPages = fpiMaxPages.
   pdeTimeStamp = fpdeTimeStamp.

   RETURN TRUE.
END.


FUNCTION fCheckCallAlarm RETURN LOGICAL:
   DEFINE VARIABLE iCallAlarm AS INTEGER NO-UNDO. 
   iCallAlarm = CURRENT-VALUE(CallAlarm).
   FIND CallAlarm WHERE CallAlarm.CASeq = iCallAlarm NO-LOCK NO-ERROR.
   IF AVAIL CallAlarm THEN
   DO:
      checkInt("CallAlarm.CLSeq", CallAlarm.CLSeq, 1).
      checkChar("CallAlarm.CLI", CallAlarm.CLI, pcCLI).
      IF pdeTimeStamp NE ? THEN
         checkDecimal("CallAlarm.ActStamp", CallAlarm.ActStamp, pdeTimeStamp).
      ELSE
         checkDecimalWithDiff("CallAlarm.ActStamp", CallAlarm.ActStamp,
            pdeTimeStamp, 3).
        
      checkInt("CallAlarm.DeliStat", CallAlarm.DeliStat, 1).
      checkInt("CallAlarm.DeliType", CallAlarm.DeliType, 1).
      checkChar("CallAlarm.DeliPara", CallAlarm.DeliPara, "1").
      checkChar("CallAlarm.DeliMsg", CallAlarm.DeliMsg, pcMessage).
      checkInt("CallAlarm.Limit", CallAlarm.Limit, 0).
      checkInt("CallAlarm.CreditType", CallAlarm.CreditType, 9).
      checkChar("CallAlarm.Brand", CallAlarm.Brand, "1").
      checkChar("CallAlarm.Orig", CallAlarm.Orig, "622").
   END.
   ELSE
     assert(FALSE, "Expected CallAlarm was not created").

   RETURN TRUE.
END.


PROCEDURE test_short_message:
   fSetParams("622636362", 1, 1, 20101010.40000 ).
   pcMessage = "Heippo dei".
   fAddParams().
   call_send_sms().
   assert_success().
   assert(get_bool("", ""), "The return value was not TRUE").
   fCheckCallAlarm().
END.

PROCEDURE test_one_paged:
   fSetParams("622636362", 1, 1, 20091012.40000 ).
   fAddParams().
   call_send_sms().
   assert_success().
   assert(get_bool("", ""), "The return value was not TRUE").
   fCheckCallAlarm().
END.


PROCEDURE test_too_long_one_paged:
   fSetParams("622636362", 1, 1, 20101010.40000 ).
   pcMessage = pcMessage + "Heippo dei".
   fAddParams().
   call_send_sms().
   assert_fault(-32602,"Message too long - would require 2 pages").
END.


PROCEDURE test_five_paged:
   fSetParams("622636362", 5, 5, 20101010.40000 ).
   fAddParams().
   call_send_sms().
   assert_success().
   assert(get_bool("", ""), "The return value was not TRUE").
   fCheckCallAlarm().
END.


PROCEDURE test_too_big_maxpage:
   fSetParams("622636362", 3, 6, 20101010.40000 ).
   fAddParams().
   call_send_sms().
   assert_fault(-32602,"Maximum value for max_pages is 5").
END.


PROCEDURE test_lacking_timestamp:
   fSetParams("633444222", 2, 3, ?).
   fAddParams().
   call_send_sms().
   assert_success().
   assert(get_bool("", ""), "The return value was not TRUE").
   fCheckCallAlarm().
END.

PROCEDURE test_lacking_maxpage:
   fSetParams("633444222", 2, ?, 20001010.30000).
   fAddParams().
   call_send_sms().
   assert_fault(-32602,"Message too long - would require 2 pages").
END.


