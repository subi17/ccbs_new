# Makefile for tmsrpc modules

.PHONEY: build compile test clean help docs start_web stop_web
include ../../etc/site.make
HUGE_PROPATH    :=  "../../tms/Mc:../../tms/Mf:../../tms/Mm:../../tms/Ar:../../tms/Class:../../tms/Dev:../../tms/Func:../../tms/Gwy:../../tms/Help:../../tms/Inv:../../tms/Mnp:../../tms/Rate:../../tms/Syst:../../tms/utilities:../../tms/xmlrpc:../../tms/xsd"

SOURCES	    := $(subst rpcmethods/,,$(shell find rpcmethods/ -name "*.p"))
SYSSOURCES  := $(subst lib/systemrpc/,,$(shell find lib/systemrpc -name "*.p"))
TARGET      ?= .
RFILES      := $(addprefix $(TARGET)/rpcmethods/,$(SOURCES:.p=.r))
SYSRFILES   := $(addprefix $(TARGET)/rpcmethods/,$(SYSSOURCES:.p=.r))
MODULE_NAME := $(notdir $(CURDIR))

COMPFILE := compile
BOGUS    := $(shell rm -f $(COMPFILE).{r,p})
FAIL     ?= echo '*** Ignoring compilation error...'

test::
	@if test -d test; then \
	    $(MAKE) -C test; \
	fi

build:
	$(MAKE) compile TARGET=$(subst $(WORK_DIR),$(BUILD_DIR),$(CURDIR)) FAIL="exit 2"
	ln -s $(shell readlink lib) $(subst $(WORK_DIR),$(BUILD_DIR),$(CURDIR))/lib


compile: $(RFILES) $(SYSRFILES)

help:
	@echo "Targets:"; \
	echo "  compile : Compile all files in their directory"; \
	echo "  test    : Delegate to test subdir"; \
	echo "  *.r     : Compile one file"; \
	echo "  clean   : Remove all compiled files"; \
	echo "  build   : Compile all files into the BUILD_DIR"; \
	echo "TARGET: $(TARGET)"; \
	echo "FCGIVERSION: $(FCGIVERSION)"; \
	echo "DB_DIR: $(DB_DIR)"; \
	echo "DATABASES: $(DATABASES)"

$(DB_DIR)/cache/%.df:
	$(MAKE) -C $(@D) $(@F)
$(DB_DIR)/cache/all.pf:
	$(MAKE) -C $(@D) $(@F)

define COMPILE_COMMON
@echo "Compiling $(<F) into $(@D)"
@-mkdir -p $$(dirname $@) &>/dev/null
@echo "ROUTINE-LEVEL ON ERROR UNDO, THROW." > $(COMPFILE).p; \
echo "COMPILE $(<F) SAVE INTO $(TARGET)/rpcmethods." >> $(COMPFILE).p; \
CERROR=0; \
PROPATH=rpcmethods:.:../../tms:$(HUGE_PROPATH) \
$(MPRO) -pf $(DB_DIR)/cache/all.pf  $(ADDARGS) -b -p $(COMPFILE).p; \
CERROR=$$?; rm -f $(COMPFILE).{p,r}; \
test $$CERROR -eq 0 || $(FAIL)
@if test -f $@; then \
    echo "RCODE-INFO:FILE-NAME = '$@'." > rcodedep.p; \
    echo "PUT UNFORMATTED RCODE-INFO:DB-REFERENCES." >> rcodedep.p; \
    deps=""; \
    for db in $$($(MPRO) -b -p rcodedep.p | tr ',' ' '); do \
        if test "$$db" == "dictdb"; then continue; fi; \
        deps="$$deps"'$$'"(DB_DIR)/cache/$$db.df "; \
    done; \
    if grep "^$@:" .table_dependencies &>/dev/null; then \
        $(SED) "s@^$@:.*@$@: $$deps@" .table_dependencies > .td.tmp; \
        mv .td.tmp .table_dependencies; \
    else \
        echo "$@: $$deps" >> .table_dependencies; \
    fi; \
    rm rcodedep.p; \
fi
@mkdir -p $(TARGET)/rpcmethods/doc &>/dev/null; \
python lib/xmlrpc/signature.py $<  > $(TARGET)/rpcmethods/doc/$(<F:.p=.sig); \
python lib/xmlrpc/help.py $<       > $(TARGET)/rpcmethods/doc/$(<F:.p=.help)
endef


$(TARGET)/%.r: %.p $(DB_DIR)/cache/all.pf
	$(COMPILE_COMMON)

rpcmethods/%.p: lib/systemrpc/%.p
	@cp $< $@

clean:
	rm -f $(RFILES)
	rm -f procore*

# include .dependencies
# include .table_dependencies

%.i:
	@test -f $@ && touch $@
%.p:
	@test -f $@ && touch $@

.dependencies: $(addprefix rpcmethods/,$(SOURCES)) $(shell find . -name "*.i")
	@touch $@; \
	for file in $?; do \
	    echo "Updating dependencies for $$file"; \
	    deps=$$($(SED) -n 's@^\s*{\([^ }&1-9][^ }&]*\).*@\1@;T;p' $$file | uniq| tr \\n " ");\
	    deps=$$(for dd in $$deps; do if ! test -f $$dd; then echo -n "../../tms/"; fi; echo -n "$$dd "; done;); \
	    if grep "^$$file:" .dependencies &>/dev/null; then \
	        $(SED) "s@^$$file:.*@$$file: $$deps@" $@ > $@.tmp; \
	        mv $@.tmp $@; \
	    else \
	        echo "$$file: $$deps" >> $@; \
	    fi; \
	done


.table_dependencies:
	touch $@

start_web: $(WORK_DIR)/var/run/lighttpd_$(MODULE_NAME).pid

$(WORK_DIR)/var/run/lighttpd_$(MODULE_NAME).pid:
	@rm -f $(WORK_DIR)/var/log/$(MODULE_NAME)_agent.*; \
	DLC=$(DLC) lighttpd -f etc/lighttpd.conf && \
	    echo "Started" || echo "Failed"

stop_web:: 
	if ! test -f $(WORK_DIR)/var/run/lighttpd_$(MODULE_NAME).pid; then \
	    echo "webserver is not running"; \
	else \
	    kill `cat $(WORK_DIR)/var/run/lighttpd_$(MODULE_NAME).pid`; \
	fi

PORT = $(shell sed -n 's/^\s*server\.port\s*=\s*\([0-9]\+\)\s*$$/\1/;T;p' etc/lighttpd.conf)
console::
	@python -i -c 'from xmlrpclib import *;s = ServerProxy("http://localhost:$(PORT)/rpc/");print "Use s as server object"'
