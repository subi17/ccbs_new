#!/bin/bash

usage() {
echo "usage: $PROGNAME [options]"
echo "Options: "
echo "-s:     continue merge even if some branches fail"
echo "-q:     do not print info about branches that are already merged"
echo "-?, -h: this help"
exit 1
}

PROGNAME=`basename $0`
opts=`getopt sq?h $*`
if test $? != 0
then
	usage
fi
eval set -- "$opts"

while [ $# -gt 0 ]
do
	case $1
		in
		--)	
		shift 
		break
		;;

		-s)
		SKIP=1
		;;

		-q)
		QUIET=1
		;;

		*)
		usage
		;;
	esac
	shift 1
done


branches=(`hg branches | grep -v ccbs | grep -v default | grep -v release_ | cut -f 1 -d \ `)

for (( idx = ${#branches[@]}-1; idx>=0 ; idx-- ))
do
	i=${branches[$idx]}
	if [[ $QUIET -ne 1 ]];
	then
		echo BRANCH: $i | tee -a /tmp/auto_merge_default_$(date +%Y%m%d).log
	fi
	hg update -C $i -q
	result=`hg -y merge -t internal:merge default 2>&1`
	if [ "$?" != "0" ];
	then
		if [[ "$result" =~ "ancestor" ]];
		then
			if [[ $QUIET -ne 1 ]];
			then
				echo "- merged already" | tee -a /tmp/auto_merge_default_$(date +%Y%m%d).log
			fi
		else
			if [[ $QUIET -eq 1 ]];
			then
				echo BRANCH: $i | tee -a /tmp/auto_merge_default_$(date +%Y%m%d).log
			fi
			if [[ $SKIP -ne 1 ]];
			then
				echo $result | tee -a /tmp/auto_merge_default_$(date +%Y%m%d).log
				hg res -l
				echo "- merge failed, take over and do it manually" | tee -a /tmp/auto_merge_default_$(date +%Y%m%d).log
				exit 1
			else
				echo "- merge failed, skipping" | tee -a /tmp/auto_merge_default_$(date +%Y%m%d).log
			fi
		fi
	else
		if [[ $QUIET -eq 1 ]];
		then
			echo BRANCH: $i | tee -a /tmp/auto_merge_default_$(date +%Y%m%d).log
		fi
		hg commit -m "automerge changes from default"
		echo "- merge success" | tee -a /tmp/auto_merge_default_$(date +%Y%m%d).log
	fi
done
hg update -C default -q
